#include<bits/stdc++.h>
using namespace std;
 
 
///0-based indexing
///p[0][i] is the maximum length of half palindrome around half index i
///p[1][i] is the maximum length of half palindrome around characters i
typedef vector<int>  VI;
VI p[2];
 
void manacher(const string s) {
	int n = s.size();
	p[0] = VI(n+1);
	p[1] = VI(n);
 
	for (int z=0; z<2; z++)
        for (int i=0, l=0, r=0; i<n; i++)
        {
            int t = r - i + !z;
            if (i<r) p[z][i] = min(t, p[z][l+t]);
            int L = i-p[z][i], R = i+p[z][i] - !z;
            while (L>=1 && R+1<n && s[L-1] == s[R+1])
                p[z][i]++, L--, R++;
            if (R>r) l=L, r=R;
        }
}
 
bool ispalin(int l, int r)
{
    int mid = (l+r+1)/2;
    int sz = r-l+1;
    bool b = sz%2;
    int len = p[b][mid];
    len = 2*len + b;
    return len>=sz;
}
 
int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
 
    int t;
    cin>>t;
 
    while(t--) {
        string s;
        cin>>s;
        int n = s.size();
 
        int i, j;
        string ff;
        for (i=0, j=n-1; i<j; i++, j--) {
            if (s[i] != s[j])   break;
            ff += s[i];
        }
 
        string bb = ff;
        reverse(bb.begin(), bb.end());
 
        string mid(s.begin()+i, s.begin()+j+1);
        manacher(mid);
 
        int k = mid.size();
 
        int best = 0, l=0, r=-1;
        for (int i=0; i<k; i++) {
            if (ispalin(0, i) && i+1 > best) {
                best = i+1;
                l = 0, r = i;
            }
        }
        for (int i=0; i<k; i++) {
            if (ispalin(k-i, k-1) && i+1 > best) {
                best = i+1;
                l = k-i, r = k-1;
            }
        }
        string mm(mid.begin()+l, mid.begin()+r+1);
        cout<<ff<<mm<<bb<<"\n";
    }
}
