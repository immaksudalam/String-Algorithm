#include <bits/stdc++.h>
using namespace std;

string preprocess(string s){
    int n = s.length();
    if(n==0) return "^$";
    string ret= "^";
    for(int i=0; i<n; i++){
        ret += "#"+ s.substr(i, 1);
    }
    ret+= "#$";
    return ret;
}

string longestPalindrome(string s){
    string t = preprocess(s);
    int n = t.length();
    int *p = new int[n];
    int c=0, r=0;
    for(int i=1; i<n-1; i++){
        int i_mirror = 2*c-i;

        p[i]=(r > i)? min(r-i, p[i_mirror]):0;
        // attempt to expand palindrome centered at i
        while(t[i+1+p[i]] == t[i-1-p[i]]){
            p[i]++;
        }
        // if palindrome centered at i expand past r,
        // adjust center based on expanded palindrome
        if(i + p[i]> r){
            c = i;
            r = i+ p[i];
        }

    }
    //find maximum element in p.
    int maxlen =0;
    int centerIndex =0;
    for(int i=1; i< n-1; i++){
        if(p[i]> maxlen){
            maxlen = p[i];
            centerIndex = i;
        }
    }
    delete[] p;
    return s.substr((centerIndex-1-maxlen)/2, maxlen);
}

int main()
{
    string s;
    cin>>s;
    string t = longestPalindrome(s);
    cout<<t<<endl;
}
